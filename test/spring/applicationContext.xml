<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">
	
	<context:property-placeholder location="classpath*:/config/database.properties,classpath*:/config/hibernate.properties" ignore-unresolvable="true"/>

	<context:component-scan base-package="com.ihidea" />

	<!-- dataSource 配置 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy"
		p:targetDataSource-ref="dynamicDataSource" />

	<!-- dataSource 多数据源支持 -->
	<bean id="dynamicDataSource" class="com.ihidea.core.support.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="dataSource" value-ref="dataSourceJDBC" />
				<!--<entry key="dataSourceForSJ" value-ref="dataSourceForSJ" /> -->
			</map>
		</property>
	</bean>
	
	<!--
			<bean id="dataSourceJDBC" class="com.mchange.v2.c3p0.ComboPooledDataSource"
				destroy-method="close" p:driverClass="oracle.jdbc.driver.OracleDriver" p:jdbcUrl="jdbc:oracle:thin:@192.168.163.129:1521:orcl"
				p:user="hfmis" p:password="123" p:initialPoolSize="1"
				p:minPoolSize="1" p:maxPoolSize="10"
				p:acquireIncrement="5" p:maxIdleTime="1800"
				p:maxStatements="0" lazy-init="true" />
		-->
	
	<bean id="dataSourceJDBC" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" p:driverClass="${jdbc.driverClass}" p:jdbcUrl="${jdbc.jdbcUrl}"
		p:user="${jdbc.user}" p:password="${jdbc.password}" p:initialPoolSize="${c3p0.initialPoolSize}"
		p:minPoolSize="${c3p0.minPoolSize}" p:maxPoolSize="${c3p0.maxPoolSize}"
		p:acquireIncrement="${c3p0.acquireIncrement}" p:maxIdleTime="${c3p0.maxIdleTime}"
		p:maxStatements="${c3p0.maxStatements}" lazy-init="true" />
			

	<!-- <bean id="dataSourceJNDI" class="org.springframework.jndi.JndiObjectFactoryBean" 
		lazy-init="true"> <property name="jndiName" value="${jndi.name}" /> </bean> 
		<bean id="dataSourceSJJDBC" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close" p:driverClass="${jdbc.bb.driverClass}" p:jdbcUrl="${jdbc.bb.jdbcUrl}" 
		p:user="${jdbc.bb.user}" p:password="${jdbc.bb.password}" p:initialPoolSize="${c3p0.initialPoolSize}" 
		p:minPoolSize="${c3p0.minPoolSize}" p:maxPoolSize="${c3p0.maxPoolSize}" p:acquireIncrement="${c3p0.acquireIncrement}" 
		p:maxIdleTime="${c3p0.maxIdleTime}" p:maxStatements="${c3p0.maxStatements}" 
		lazy-init="true" /> -->


	<!-- hibernate3 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
			</props>
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath*:jbpm.repository.hbm.xml</value>
				<value>classpath*:jbpm.execution.hbm.xml</value>
				<value>classpath*:jbpm.history.hbm.xml</value>
				<value>classpath*:jbpm.task.hbm.xml</value>
				<value>classpath*:jbpm.identity.hbm.xml</value>
			</list>
		</property>
		<property name="useTransactionAwareDataSource" value="true"></property>
	</bean>


	<!-- ibatis3-->
	<!--  id不能用sqlSessionFactory与spring3的context:property-placeholder location冲突 -->
	<bean id="tysqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/config/ibatisConfig.xml" />
		<property name="mapperLocations" value="classpath*:com/**/mappers/**/*.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="com.ihidea.dao,com.ihidea.*.dao,com.ihidea.*.daoEx,com.ihidea.*.*.dao,com.ihidea.*.*.daoEx" />
		<property name="sqlSessionFactoryBeanName" value="tysqlSessionFactory" />
	</bean>


	<!-- spring jdbc -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
		<property name="nativeJdbcExtractor" ref="nativeJdbcExtractor" />
	</bean>

	<bean id="nativeJdbcExtractor"
		class="org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor"
		lazy-init="true" />

	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler"
		lazy-init="true">
		<property name="nativeJdbcExtractor" ref="nativeJdbcExtractor" />
	</bean>

	<!-- spring transaction -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<aop:aspectj-autoproxy />

	<aop:config>
		<aop:advisor pointcut="execution(* com.ihidea..*Service.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<aop:config>
		<aop:advisor pointcut="execution(* com.ihidea..*Manager.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 定义国际化消息 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages" />
	</bean>
	<!-- 获取本地 -->
	<!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean> -->

</beans>